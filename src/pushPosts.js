// Generated by CoffeeScript 1.6.3
(function() {
  var Post, User, api, e, models, mongoUri, mongoose, onGetPosts, pushNewPosts, _;

  _ = require('underscore');

  api = require('./api.js');

  models = require('./models/models.js');

  User = models.User;

  Post = models.Post;

  onGetPosts = function(posts, callback) {
    return Post.find({}, function(err, dbposts) {
      var newposts, post, postsNotSaved, _i, _len;
      if (err) {
        if (typeof callback === "function") {
          callback(err);
        }
      }
      postsNotSaved = 0;
      newposts = [];
      for (_i = 0, _len = posts.length; _i < _len; _i++) {
        post = posts[_i];
        if (!(!_.findWhere(dbposts, {
          tumblrId: post.id
        }))) {
          continue;
        }
        ++postsNotSaved;
        newposts.push(post);
        console.log("pushing new post \"" + post.title + "\"");
        Post.create({
          tumblrId: post.id,
          tags: post.tags,
          tumblrUrl: post.post_url,
          tumblrPostType: post.type,
          date: post.date
        }, (function(err, data) {
          if (err) {
            if (typeof callback === "function") {
              callback(err);
            }
          }
          if (--postsNotSaved === 0) {
            return typeof callback === "function" ? callback(null, newposts) : void 0;
          }
        }));
      }
      if (newposts.length === 0) {
        return callback(null, []);
      }
    });
  };

  pushNewPosts = function(callback) {
    var blog;
    blog = api.getBlog('meavisa.tumblr.com');
    return blog.posts({
      limit: -1
    }, (function(err, data) {
      if (err) {
        if (typeof callback === "function") {
          callback(err);
        }
      }
      return onGetPosts(data.posts, callback);
    }));
  };

  if (module === require.main) {
    try {
      require('./env.js');
    } catch (_error) {
      e = _error;
    }
    mongoose = require('mongoose');
    mongoUri = process.env.MONGOLAB_URI || process.env.MONGOHQ_URL || 'mongodb://localhost/madb';
    mongoose.connect(mongoUri);
    pushNewPosts(function() {
      return mongoose.connection.close();
    });
  } else {
    exports.pushNewPosts = pushNewPosts;
  }

}).call(this);
