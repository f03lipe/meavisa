// Generated by CoffeeScript 1.6.3
(function() {
  var TagSchema, authTypes, crypto, findOrCreate, getLabel, mongoose, recursify, transTable, _;

  mongoose = require('mongoose');

  crypto = require('crypto');

  _ = require('underscore');

  authTypes = [];

  TagSchema = new mongoose.Schema({
    description: {
      type: String
    },
    name: {
      type: String
    },
    children: {
      type: Array
    }
  });

  TagSchema.methods = {};

  findOrCreate = function(conditions, doc, options, callback) {
    var self;
    if (arguments.length < 4) {
      if (typeof options === 'function') {
        callback = options;
        options = {};
      } else if (typeof doc === 'function') {
        callback = doc;
        doc = {};
        options = {};
      }
    }
    self = this;
    return this.findOne(conditions, function(err, result) {
      var key, obj, _i, _len;
      if (err || result) {
        if (options && options.upsert && !err) {
          return self.update(conditions, doc, function(err, count) {
            return self.findOne(conditions, function(err, result) {
              return callback(err, result, false);
            });
          });
        } else {
          return callback(err, result, false);
        }
      } else {
        for (_i = 0, _len = doc.length; _i < _len; _i++) {
          key = doc[_i];
          conditions[key] = doc[key];
        }
        obj = new self(conditions);
        return obj.save(function(err) {
          return callback(err, obj, true);
        });
      }
    });
  };

  String.prototype.toCamel = function(){
	return this.replace(/([a-z]+)/g, function(a){return a[0].toUpperCase()+a.slice(1);});
};;

  transTable = {
    'estagio': 'Estágio',
    'olimpiadas': 'Olimpíadas',
    'voluntariado': 'Voluntariado',
    'bolsasdeestudo': 'Bolsas de Estudo',
    'matematica': 'Matemática',
    'cursos': 'Cursos',
    'intercambio': 'Intercâmbio'
  };

  recursify = function(tags) {
    var hashtag, parent, tagList, tagsObj, _base, _i, _len;
    tagsObj = {
      label: null,
      children: {}
    };
    for (_i = 0, _len = tags.length; _i < _len; _i++) {
      hashtag = tags[_i];
      tagList = hashtag.split(':');
      parent = tagsObj;
      while (tagList.length) {
        hashtag = tagList.shift();
        parent = (_base = parent.children)[hashtag] != null ? (_base = parent.children)[hashtag] : _base[hashtag] = {
          label: getLabel(hashtag),
          children: {}
        };
      }
    }
    return tagsObj.children;
  };

  getLabel = function(hashtag) {
    return transTable[hashtag.toLowerCase()] || hashtag.toCamel();
  };

  TagSchema.statics.findOrCreate = findOrCreate;

  TagSchema.statics.getLabel = getLabel;

  TagSchema.statics.recursify = recursify;

  module.exports = mongoose.model("Tag", TagSchema);

}).call(this);
