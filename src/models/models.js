// Generated by CoffeeScript 1.6.3
(function() {
  var PostSchema, UserSchema, authTypes, crypto, findOrCreate, mongoose, _;

  mongoose = require('mongoose');

  crypto = require('crypto');

  _ = require('underscore');

  authTypes = [];

  UserSchema = new mongoose.Schema({
    name: {
      type: String
    },
    tags: {
      type: Array,
      "default": []
    },
    facebookId: {
      type: String
    },
    accessToken: {
      type: String
    },
    lastUpdate: {
      type: Date,
      "default": Date(0)
    }
  }, {
    id: true
  });

  PostSchema = new mongoose.Schema({
    tumblrId: {
      type: Number
    },
    tags: {
      type: Array
    },
    urlTemplate: {
      type: String,
      "default": '/{id}'
    },
    tumblrUrl: {
      type: String
    },
    tumblrPostType: {
      type: String
    },
    date: {
      type: Date
    }
  }, {
    id: false
  });

  PostSchema.virtual('path').get(function() {
    return this.urlTemplate.replace(/{id}/, this.id);
  });

  UserSchema.methods = {};

  PostSchema.methods = {};

  findOrCreate = function(conditions, doc, options, callback) {
    var self;
    if (arguments.length < 4) {
      if (typeof options === 'function') {
        callback = options;
        options = {};
      } else if (typeof doc === 'function') {
        callback = doc;
        doc = {};
        options = {};
      }
    }
    self = this;
    return this.findOne(conditions, function(err, result) {
      var key, obj, _i, _len;
      if (err || result) {
        if (options && options.upsert && !err) {
          return self.update(conditions, doc, function(err, count) {
            return self.findOne(conditions, function(err, result) {
              return callback(err, result, false);
            });
          });
        } else {
          return callback(err, result, false);
        }
      } else {
        for (_i = 0, _len = doc.length; _i < _len; _i++) {
          key = doc[_i];
          conditions[key] = doc[key];
        }
        obj = new self(conditions);
        return obj.save(function(err) {
          return callback(err, obj, true);
        });
      }
    });
  };

  UserSchema.statics.findOrCreate = findOrCreate;

  PostSchema["static"].findOrCreate = findOrCreate;

  module.exports = {
    User: mongoose.model("User", UserSchema),
    Post: mongoose.model("Post", PostSchema)
  };

}).call(this);
