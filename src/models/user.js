// Generated by CoffeeScript 1.6.3
(function() {
  var UserSchema, authTypes, crypto, findOrCreate, mongoose, _;

  mongoose = require('mongoose');

  crypto = require('crypto');

  _ = require('underscore');

  authTypes = [];

  UserSchema = new mongoose.Schema({
    name: {
      type: String,
      "default": ''
    },
    tags: {
      type: Array,
      "default": ''
    },
    facebookId: {
      type: String,
      "default": ''
    },
    accessToken: {
      type: String,
      "default": ''
    },
    lastUpdate: {
      type: Date,
      "default": Date(0)
    }
  });

  UserSchema.methods = {};

  UserSchema.plugin(findOrCreate = function(schema, options) {
    return schema.statics.findOrCreate = function(conditions, doc, options, callback) {
      var self;
      if (arguments.length < 4) {
        if (typeof options === 'function') {
          callback = options;
          options = {};
        } else if (typeof doc === 'function') {
          callback = doc;
          doc = {};
          options = {};
        }
      }
      self = this;
      return this.findOne(conditions, function(err, result) {
        var key, obj, _i, _len;
        if (err || result) {
          if (options && options.upsert && !err) {
            return self.update(conditions, doc, function(err, count) {
              return self.findOne(conditions, function(err, result) {
                return callback(err, result, false);
              });
            });
          } else {
            return callback(err, result, false);
          }
        } else {
          for (_i = 0, _len = doc.length; _i < _len; _i++) {
            key = doc[_i];
            conditions[key] = doc[key];
          }
          obj = new self(conditions);
          return obj.save(function(err) {
            return callback(err, obj, true);
          });
        }
      });
    };
  });

  module.exports = mongoose.model("User", UserSchema);

}).call(this);
