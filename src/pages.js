// Generated by CoffeeScript 1.6.3
(function() {
  var User, api, blog, blog_url, e, env, getPostsWithTags, posts, request, topics, _;

  _ = require('underscore');

  api = require('./apis.js');

  request = require('request');

  User = require('./models/user.js');

  try {
    env = require('./env.js');
  } catch (_error) {
    e = _error;
    env = {
      facebook: {
        app_id: process.env.facebook_app_id,
        secret: process.env.facebook_secret,
        canvas: process.env.facebook_canvas
      }
    };
  }

  blog_url = 'http://meavisa.tumblr.com';

  blog = api.getBlog("meavisa.tumblr.com");

  topics = [];

  posts = [];

  blog.posts(function(err, data) {
    if (err) {
      throw err;
    }
    return data.posts.forEach(function(post, i) {
      return post.tags.forEach(function(tag) {
        if (topics.indexOf(tag) === -1) {
          topics.push(tag);
          return console.log('pushing found tag', tag);
        }
      });
    });
  });

  getPostsWithTags = function(tags, callback) {
    return blog.posts({
      limit: -1
    }, function(err, data) {
      posts = [];
      data.posts.forEach(function(post) {
        var int;
        int = _.intersection(post.tags, tags);
        if (int[0]) {
          return posts.push(post);
        }
      });
      return typeof callback === "function" ? callback() : void 0;
    });
  };

  exports.Pages = {
    index: {
      get: function(req, res) {
        if (req.user) {
          req.session.messages = [JSON.stringify(req.user)];
          getPostsWithTags(req.user.tags, function() {
            return res.render('panel', {
              user: req.user,
              topics: topics,
              posts: posts,
              blog_url: blog_url,
              messages: [JSON.stringify(req.user), JSON.stringify(req.session)]
            });
          });
          return;
        }
        return User.find({}, function(err, users) {
          res.writeHead(200, {
            'Content-Type': 'text/html;charset=UTF-8'
          });
          res.write(JSON.stringify(users));
          return res.end('\noi, ' + req.ip + JSON.stringify(req.session) + "<form method='get' action='/auth/facebook'><input type='submit' name='oi' value='post'></form>");
        });
      }
    },
    logout: {
      get: function(req, res) {
        req.logout();
        return res.redirect('/');
      }
    },
    session: {
      get: function(req, res) {
        return User.find({}, function(err, users) {
          var obj;
          obj = {
            ip: req.ip,
            session: req.session,
            users: users
          };
          return res.end(JSON.stringify(obj));
        });
      }
    },
    update: {
      get: function(req, res) {
        var chosen;
        if (!req.user) {
          return res.redirect('/');
        }
        if (!req.query['topic'] || typeof req.query['topic'] === 'string') {
          req.query['topic'] = [req.query['topic']];
        }
        chosen = _.filter(req.query['topic'], function(topic) {
          return topic != null;
        });
        req.user.tags = chosen;
        req.user.save();
        api.sendNotification(req.user.facebookId, "You are following the topics " + (chosen.join(", ")) + ".");
        getPostsWithTags(chosen, function() {});
        return res.redirect('back');
      }
    },
    dropall: {
      get: function(req, res) {
        if (req.user && req.user.facebookId === "100000366187376") {
          return User.remove({}, function(err) {
            res.write("collection removed");
            return res.end(err);
          });
        } else {
          return res.end("Cannot GET /dropall");
        }
      }
    }
  };

}).call(this);
